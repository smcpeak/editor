search-and-replace-spec.txt
User interface specification for Search and Replace dialog


Introduction
------------

The Search and Replace function allows one to find instances of text
within a file and optionally replace them with other text.  Notably,
it acts like "incremental search" in that matches are immediately
highlighted in all editor windows as the user types.


Keybindings
-----------

The keys for this feature and their default bindings are:

- editor.toggleSearch            Ctrl+S
- editor.nextMatch               Ctrl+G
- editor.previousMatch           Ctrl+Shift+G
- editor.replaceMatch            Ctrl+R



Interaction with Editor Window
------------------------------

Search and Replace is an optional panel that appears along the bottom
edge of an editor window, just above the status bar.

See search-and-replace.ded(.png) for a wireframe.

Initially, the panel is hidden.

From an editor window, editor.toggleSearch shows the panel if it is
hidden and puts the focus in the panel.  When the panel has focus,
editor.toggleSearch moves focus back to the editor pane.  From either
the editor pane or search panel, pressing Esc closes the search panel
and returns focus to the editor pane.

When the panel is first shown within a given window, focus is initially
placed on the Find text box.  Thereafter, the panel remembers which
control has focus, and pressing editor.toggleSearch from the editor with
no text selected moves focus to the previously focused control in the
panel.

Similarly, the state of all dialog controls is also retained and
restored, including the text in the Find and Repl boxes.  (However,
dropdowns always start in the "up" state when the dialog is shown, even
if one was down when the dialog was closed.)  Dialog state is discarded
once the editor window closes.

Pressing editor.toggleSearch from the editor with text selected puts
that text into the Find panel and sets it as the focus control.  When
this is done, the added text is *not* selected within the Find control
itself; if one selects "foo", types editor.toggleSearch, then
immediately types "t", the contents of the Find control are "foot".  If
the Regex box is checked, then when selected text is entered into Find,
backslashes are automatically inserted before any regex metacharacters
in order to make a regular expression that matches the selected text.
Regardless of the Insens checkbox, the copied text has the same letter
case as the original.

Focus can be moved among the controls by pressing Tab and Shift+Tab.
Focus does not leave the panel that way though; one must use
editor.toggleSearch or Esc or click with the mouse to do that.

While the panel is shown, in the editor panel, all occurrences of
matching text are highlighted. These are the "matches".  Matches are
recognized by scanning forward from the start of the file.  When one
match is found, the next scan begins with the second character after the
last in the previous match.  Consequently, matches do not overlap or
touch.

Furthermore, it is therefore possible for the user to select some text,
press editor.toggleSearch, and have that text *not* be a match due to a
prior overlapping match.  For example, if the text is "foofoofoo", and
the user selects characters 4 through 9, then presses
editor.toggleSearch, the Find box becomes "foofoo" with a match shown
for characters 1 through 6, which is different than what is selected
(which is still 4-9).

The set of highlighted matches updates immediately in response to all
changes to the dialog controls.

Certain actions, described below, change what text is selected in the
editor pane.  When text is selected, the cursor is placed at the *start*
of the selection area rather than the end.  The editor pane scrolls to
keep the selection in view.

LATER: When the editor pane scrolls, I would like there to be an
animation shown that makes it clear at least which way it scrolled, and
ideally conveying some sense of distance.  I have in mind to briefly
overlay an arrow on the scrollbar drawn from the thumb's original
location to its changed location.  The arrow would appear when the
scroll happens and then fade out over about one second.  Quickly doing
multiple scrolls would show multiple arrows, each on independent fade
timers.  Admittedly, this is in part meant to compensate for the fact
that the scrollbar thumb on Windows is practically invisible--thanks MS.


Dialog Controls
---------------

There is a location (line/col) within the editor text known as the
"search start location".  When the search panel receives focus, the
search start location is set to be the cursor location if nothing is
selected, and the first character of the selection otherwise. Certain
operations, described below, change the search start location.

When the text in the Find box is changed by the user (for example by
typing into it, or pasting text from the clipboard, or choosing an entry
from the history dropdown), the set of matches in the editor window is
updated.  Then, if there is at least one match, the first match after
the search start location is selected, wrapping around to the beginning
of the file if necessary.  If there is no match, the selection is not
changed.

The Repl combo box behaves in the standard way.

For Find, the dropdown contains up to 20 unique non-empty previously
used strings, in order of most recently used.  The current text is
added to the history when:

* The text is replaced with a string from the editor window.

* The entire text is highlighted and then deleted either by typing
or pressing Del or Backspace.

* The Next, Prev, or Replace buttons are pressed.

For Replace, the dropdown also contains a history of up to 20 items.
An item is added to its history when:

* The entire text is highlighted and then deleted either by typing
or pressing Del or Backspace.

* The Replace button is pressed.

The Insens checkbox makes searching insensitive to letter case.

The Regex checkbox interprets the Find text as a regular expression in
Perl syntax, and the Repl text as regular expression replacement text
(e.g., with references to match groups in Find), again in Perl syntax.

If there is no selected text in the editor, or the selected text is not
one of the matches, then pressing Next selects the first match that
starts on or after the current cursor location.  If there is no match
after the cursor, it selects the first match in the file.  If the editor
has a match selected, then pressing Next selects the first match after
that one (or, if none, the first in file).  When a new match is
selected, the search start location is updated to be the first character
in that new selection.  If there is no match that would be selected by
pressing Next, then the button is disabled.

When Prev is pressed, it selects the first match that starts before the
current cursor, working backwards from the cursor, wrapping around to
the end of the file if necessary.  (Unlike with Next, there is no need
to distinguish the case of the selection being a match.)  Again, if no
new text would be selected then the button is disabled.

Replace is enabled if the selected text in the editor is a match.  When
it is pressed, that selected text is replaced with the text in the Repl
box (which may be empty) or, for Regex search with backreferences, the
appropriately constructed replacement text for that match.  Then it does
one of the following in the editor depending on the setting in the
modifier dropdown:

* Only: The inserted replacement text.  If the replacement text is
  empty, then there is no selection and the cursor is at the place
  where the found text was.  (It is possible that the replacement
  is itself a match.)

* +Next: Same as Only, except behaves as if Next was pressed right
  after if it would have been enabled.

* +Prev: Same as Only followed by Prev.

* All: All matches in the file are replaced.  The set of matches is
  *not* recalculated while replacement is ongoing.  (This matters if
  the replacement text potentially creates new matches.)

Pressing editor.nextMatch while focus is anywhere on the search panel
or in the editor pane is equivalent to pressing the Next button.
Pressing editor.previousMatch is equivalent to Prev.  Pressing
editor.replaceMatch is equivalent to Replace, including the effect
of the modifier.

The label to the right of the modifier dropdown contains the text
"N matches" where N is the number of matches.  This count updates
immediately in response to changes in the dialog.

Help displays a dialog with help text.  That text is closely based
on this specification.


EOF
