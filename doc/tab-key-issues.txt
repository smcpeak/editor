tab-key-issues.txt
==================

The Tab key is troublesome in Qt.  This document explains some of the
issues I've run into.


Receiving Tab in the editor widget
----------------------------------

Once a widget has multiple focusable child widgets, Qt maps Tab to
change the focus among them.  I override that in
EditorWindow::eventFilter, which seems to be the standard approach
based on some web searching.


Shortcuts for rigid indentation
-------------------------------

Currently I do not install shortcuts for the rigid indentation menu
items.  The reason is they created conflicts with Tab that, at least
after a short while, I was unable to resolve.  Part of the issue is I
implement a modified focus change mechanism in the SAR panel.

One possible solution element is to disable the menu item at certain
times.  I tried doing that on focus change (using an event filter) but
it didn't work because when the menu is opened, that is a focus change,
so the menu item would always appear disabled.

Another possible element is creating a QAction in the SAR panel to
handle the Tab press.  That could potentially be enabled or disabled if
I could find the right times to do it.  Focus in/out seemed to work
there when I tried it (again, with an event filter).

Related: QLineEdit has an interesting interaction: its clipboard
commands, such as Ctrl+C, work on the line edit even though I have menu
items with shortcuts that would seem like they should take precedence.
Well, QLineEdit::event handles something called
QEvent::ShortcutOverride, and that somehow allows its bindings to
override mine when the line edit has focus.  Curiously, my Undo/Redo
bindings take precedence due to an eventFilter I installed.  But I also
have an eventFilter for Tab there, yet that seems inadequate to prevent
a shortcut ambiguity from arising.

Update: I found a potential solution: if the menu title has a tab
character in it, that separates name from shortcut display, but the
listed shortcut is not active!  So I can continue to handle the keys
elsewhere but let the menu perform its documentation function.

This solution was suggested here:

  https://stackoverflow.com/questions/1894395/in-qt-how-to-show-keyboard-shortcuts-in-menu-but-disable-them

I was able to confirm by looking at the Qt source code that this is
intended behavior.  In src/widgets/widgets/qmenu.cpp,
QMenu::initStyleOption uses the same syntax to denote the real shortcut
if there is not already a Tab character:

  QString textAndAccel = action->text();
#ifndef QT_NO_SHORTCUT
  if (textAndAccel.indexOf(QLatin1Char('\t')) == -1) {
      QKeySequence seq = action->shortcut();
      if (!seq.isEmpty())
          textAndAccel += QLatin1Char('\t') + seq.toString(QKeySequence::NativeText);
  }
#endif

That is preparatory to actually drawing the menu label shortcut, which
happens in QWindowsStyle::drawControl in
src/widgets/styles/qwindowsstyle.cpp:

  int t = s.indexOf(QLatin1Char('\t'));
  int text_flags = Qt::AlignVCenter | Qt::TextShowMnemonic | Qt::TextDontClip | Qt::TextSingleLine;
  if (!proxy()->styleHint(SH_UnderlineShortcut, menuitem, widget))
      text_flags |= Qt::TextHideMnemonic;
  text_flags |= Qt::AlignLeft;
  if (t >= 0) {
      QRect vShortcutRect = visualRect(opt->direction, menuitem->rect,
          QRect(textRect.topRight(), QPoint(menuitem->rect.right(), textRect.bottom())));
      const QString textToDraw = s.mid(t + 1).toString();
      if (dis && !act && proxy()->styleHint(SH_EtchDisabledText, opt, widget)) {
          p->setPen(menuitem->palette.light().color());
          p->drawText(vShortcutRect.adjusted(1, 1, 1, 1), text_flags, textToDraw);
          p->setPen(discol);
      }
      p->drawText(vShortcutRect, text_flags, textToDraw);     <-------
      s = s.left(t);
  }

Relatedly, QMenuPrivate::updateActionRects will calculate the label size
and include the shortcut portion if it is after a Tab, or lacking that,
there is an installed real shortcut:

  QString s = action->text();
  int t = s.indexOf(QLatin1Char('\t'));
  if (t != -1) {
      tabWidth = qMax(int(tabWidth), qfm.width(s.mid(t+1)));
      s = s.left(t);
#ifndef QT_NO_SHORTCUT
  } else {
      QKeySequence seq = action->shortcut();
      if (!seq.isEmpty())
          tabWidth = qMax(int(tabWidth), qfm.width(seq.toString(QKeySequence::NativeText)));
#endif
  }

The above is solid confirmation that (a) this is an intentional feature,
unlikely to be removed in a later Qt release, and (b) the use of a Tab
character does not magically install a shortcut (despite the claim by
"dF" in the linked SO thread).


EOF
